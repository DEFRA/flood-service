{
  "getFloods": "select ta_id,ta_code,ta_name,ta_description,situation,quick_dial,situation_changed,severity_changed,message_received,severity_value,severity,ST_AsGeoJSON(st_centroid) as geometry from u_flood.fwa_mview ORDER BY CASE severity_value WHEN 3 THEN 1 WHEN 1 THEN 3 ELSE severity_value END, ta_name; SELECT load_timestamp as timestamp FROM u_flood.current_load_timestamp where id = 1;",
  "getFloodsWithin": "select ta_id,ta_code,ta_name,ta_description,situation,quick_dial,situation_changed,severity_changed,message_received,severity_value,severity,ST_AsGeoJSON(st_centroid) as geometry from u_flood.fwa_mview WHERE ST_Intersects(geom, ST_Transform(ST_Transform(ST_MakeEnvelope($1, $2, $3, $4, 4326), 27700), 4326)) ORDER BY CASE severity_value WHEN 3 THEN 1 WHEN 1 THEN 3 ELSE severity_value END, ta_name;",
  "getAlertArea": "SELECT gid as id, area, fws_tacode as code, ta_name as name, descrip as description, la_name as localAuthorityName, qdial as quickDialNumber, river_sea as riverOrSea, st_AsGeoJSON(geom) as geom, ST_AsGeoJSON(ST_centroid(geom)) as centroid FROM u_flood.flood_alert_area WHERE fws_tacode = $1;",
  "getWarningArea": "SELECT gid as id, area, fws_tacode as code, ta_name as name, descrip as description, la_name as localAuthorityName, parent, qdial as quickDialNumber, river_sea as riverOrSea, st_AsGeoJSON(geom) as geom, ST_AsGeoJSON(ST_centroid(geom)) as centroid FROM u_flood.flood_warning_area WHERE fws_tacode = $1;",
  "getStation": "SELECT * FROM u_flood.station_split_mview WHERE rloi_id = $1 AND qualifier = $2;",
  "getStationsByRadius": "SELECT rloi_id, telemetry_id, region, catchment, wiski_river_name, agency_name, external_name, station_type, status, qualifier, (lower(region) = 'wales' OR rloi_id IN (4162, 4170, 4173, 4174, 4176)) AS isWales FROM u_flood.station_split_mview WHERE ST_DWithin(geography, ST_MakePoint($1, $2)::geography, $3) AND lower(status) != 'closed' AND (lower(region) != 'wales' OR catchment IN ('Dee', 'Severn Uplands', 'Wye')) ORDER BY wiski_river_name, external_name;",
  "getStationsWithin": "SELECT ss.rloi_id, ss.telemetry_id, ss.region, ss.catchment, ss.wiski_river_name, ss.agency_name, ss.external_name, ss.station_type, ss.status, ss.qualifier, (lower(ss.region) = 'wales' OR ss.rloi_id IN (4162, 4170, 4173, 4174, 4176)) AS isWales, so.processed_value as value, so.value_timestamp, so.error as value_erred, so.percentile_5, so.percentile_95, st_asgeojson(centroid) as geometry FROM u_flood.station_split_mview ss inner join u_flood.stations_overview_mview so on ss.rloi_id = so.rloi_id and ss.qualifier = so.direction WHERE ST_Contains(ST_Transform(ST_Transform(ST_MakeEnvelope($1, $2, $3, $4, 4326), 27700), 4326), ss.centroid) AND lower(ss.status) != 'closed' AND (lower(ss.region) != 'wales' OR ss.catchment IN ('Dee', 'Severn Uplands', 'Wye')) ORDER BY ss.wiski_river_name, ss.external_name;",
  "getStationTelemetry": "SELECT * FROM u_flood.get_telemetry($1, $2);",
  "getFFOIForecast": "SELECT f.* FROM u_flood.ffoi_forecast f INNER JOIN u_flood.ffoi_station s ON f.rloi_id = s.rloi_id WHERE f.rloi_id = $1 ORDER BY forecast_date DESC LIMIT 1;",
  "getFFOIThresholds": "SELECT u_flood.ffoi_get_thresholds($1);",
  "isEngland": "SELECT ((SELECT count(1) FROM u_flood.england_010k e WHERE st_intersects(st_setsrid(st_makepoint($1, $2), 4326), e.geom)) > 0) AS is_england;",
  "getImpactsWithin": "select * from u_flood.impact_mview i where ST_Contains(ST_Transform(ST_MakeEnvelope($1, $2, $3, $4, 4326), 4326), i.geom);",
  "getImpactsByRloiId": "select * from u_flood.impact_mview i where i.rloiid = $1;"
}